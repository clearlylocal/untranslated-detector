{"version":3,"sources":["check.ts","App.tsx","index.tsx"],"names":["WORD_REGEX","STRIP_REGEX","EXCLUDE_REGEX","check","src","trg","comment","strippedSrc","replace","strippedTrg","iter","split","entries","Symbol","iterator","dupes","n","next","done","value","idx","seg","toLowerCase","includes","strs","nextSeg","join","push","last","pop","test","Set","filter","dupe","length","Col","stored","cmtmp","suf","JSON","parse","localStorage","getItem","suffixize","filename","suffix","match","pre","ext","Date","toISOString","parseExcelFile","files","commentTemplate","a","file","reader","FileReader","onloadend","_event","arrayBuffer","result","ExcelJS","Workbook","xlsx","load","then","workbook","worksheets","forEach","sheet","eachRow","row","_rowNumber","omitted","values","Src","Trg","Comments","getCell","map","x","Boolean","writeBuffer","buf","document","createElement","outFile","Blob","type","href","URL","createObjectURL","download","name","click","readAsArrayBuffer","App","useForm","register","watch","handleSubmit","filenameSuffix","useMemo","useEffect","onChange","data","setItem","stringify","defaultValue","ref","multiple","ReactDOM","render","StrictMode","getElementById"],"mappings":"uSACMA,EAAa,w0QAEbC,EAAc,mBACdC,EAAgB,gBAIf,SAASC,EAAMC,EAAaC,EAAaC,GAc/C,IAbA,IAAMC,EAAcH,EAAII,QAAQP,EAAa,QACvCQ,EAAcJ,EAAIG,QAAQP,EAAa,QAQvCS,EAFkBH,EAAYI,MAAMX,GAEbY,UAAUC,OAAOC,YAE1CC,EAAkB,KAET,CACZ,IAAIC,EAAIN,EAAKO,OAEb,GAAID,EAAEE,KAAM,MAHA,kBAKOF,EAAEG,MALT,GAKLC,EALK,KAKAC,EALA,KAOZ,GAAID,EAAM,IAAM,GAKZX,EAAYa,cAAcC,SAASF,EAAIC,eAAgB,CAG1D,IAFA,IAAIE,EAAO,CAACH,KAGXL,EAAIN,EAAKO,QAEHC,MAHM,KAMMO,EANN,YAMiBT,EAAEG,MANnB,MAQZ,IACCV,EACEa,cACAC,UAAUC,EAAKE,KAAK,IAAMD,GAASH,eAIrC,MAFAE,EAAKG,KAAKF,GAQZ,IAFA,IAAIG,EAAO,GAEK,KAATA,GACNA,EAAOJ,EAAKK,MAGT7B,EAAW8B,KAAKF,IACnBJ,EAAKG,KAAKC,GAGXb,EAAMY,KAAKH,EAAKE,KAAK,MAIvB,OAAO,YAAI,IAAIK,IAAIhB,IAAQiB,QAAO,SAAAC,GAKjC,OAHCA,EAAKC,QAlEsB,GAmE1BD,IAASA,EAAKX,eAAiBW,EAAKC,QApEZ,KAwExBhC,EAAc4B,KAAKG,KACnB3B,EAAQiB,SAASU,M,MC9DhBE,E,wBALCC,EAAmB,2BALZ,CACZC,MAAO,6BACPC,IAAK,2BAKFC,KAAKC,MAAL,UAAWC,aAAaC,QAAQ,eAAhC,QAA2C,Q,SAG1CP,O,aAAAA,I,aAAAA,I,yBAAAA,M,KAML,IAAMQ,EAAY,SAACC,EAAkBC,GAAoB,IAAD,cAClCD,EAASE,MAAM,0BADmB,QACG,CACzD,KACAF,EACA,IAJsD,mBAC9CG,EAD8C,KACzCC,EADyC,KAOvD,OACCD,EACAF,EAAOrC,QACN,YACA,IAAIyC,MAAOC,cAAc1C,QAAQ,MAAO,KAEzCwC,GAIIG,EAAc,uCAAG,WACtBC,EACAC,EACAR,GAHsB,mBAAAS,EAAA,yDAKjBF,EAAMlB,OALW,+DAOHkB,GAPG,IAOtB,IAPsB,iBAOXG,EAPW,QAQfC,EAAS,IAAIC,WAEnBD,EAAOE,UAAY,SAACC,GACnB,IAAMC,EAAcJ,EAAOK,QAEV,IAAIC,IAAQC,UAEpBC,KAAKC,KAAKL,GAAaM,KAAhC,uCAAqC,WAAOC,GAAP,MAAAb,EAAA,WAAAA,EAAA,6DACpCa,EAASC,WAAWC,SAAQ,SAACC,GAC5BA,EAAMC,SAAQ,SAACC,EAAKC,GAAgB,IAAD,MAC5BC,EAAUvE,EAAK,UACpBqE,EAAIG,OAAOxC,EAAIyC,YADK,QACG,GADH,UAEpBJ,EAAIG,OAAOxC,EAAI0C,YAFK,QAEG,GAFH,UAGpBL,EAAIG,OAAOxC,EAAI2C,iBAHK,QAGQ,IAGzBJ,EAAQxC,SACXsC,EAAIO,QAAQ5C,EAAI2C,UAAU3D,MAAQ,CACjCqD,EAAIG,OAAOxC,EAAI2C,UACfzB,EAAgB7C,QACf,YACAkE,EAAQM,KAAI,SAACC,GAAD,sBAAWA,EAAX,aAAiBvD,KAAK,QAGlCM,OAAOkD,SACPxD,KAAK,kBAlB0B,SAuBlByC,EAASH,KAAKmB,YAAY,IAvBR,OAuB9BC,EAvB8B,OAyB9B9B,EAAI+B,SAASC,cAAc,KAC3BC,EAAU,IAAIC,KAAK,CAACJ,GAAM,CAC/BK,KAAM,eAEPnC,EAAEoC,KAAOC,IAAIC,gBAAgBL,GAC7BjC,EAAEuC,SAAWlD,EAAUY,EAAKuC,KAAMjD,GAClCS,EAAEyC,QA/BkC,2CAArC,wDAmCDvC,EAAOwC,kBAAkBzC,IA3C1B,uBAA2B,IAPL,yEAAH,0DAsDP0C,EAAM,WAAO,IAAD,MACkBC,cAAlCC,EADgB,EAChBA,SAAUC,EADM,EACNA,MAAOC,EADD,EACCA,aAMnBhD,EAAuB,UAAG+C,EAAM,gBAAT,QAAqBhE,EAAOC,MACnDiE,EAAsB,UAAGF,EAAM,cAAT,QAAmBhE,EAAOE,IAEhDc,EAAkBmD,mBACvB,kCAAMH,EAAM,eAAZ,QAAwB,KACxB,CAACA,IAQF,OALAI,qBAAU,WACTrD,EAAeC,EAAOC,EAAiBiD,KAErC,CAAClD,IAGH,uBAAMqD,SAAUJ,GAlBK,SAACK,GACtBjE,aAAakE,QAAQ,OAAQpE,KAAKqE,UAAUF,OAiB5C,UACC,sDAEC,uBACCZ,KAAK,QACLe,aAAczE,EAAOC,MACrByE,IAAKX,OAGP,uBACA,uBACA,2DAEC,uBAAOL,KAAK,MAAMe,aAAczE,EAAOE,IAAKwE,IAAKX,OAElD,uBACA,uBACA,uDAEC,uBAAOV,KAAK,OAAOK,KAAK,OAAOiB,UAAQ,EAACD,IAAKX,WChIjDa,IAASC,OACR,cAAC,IAAMC,WAAP,UACC,cAAC,EAAD,MAED7B,SAAS8B,eAAe,W","file":"static/js/main.88ce2415.chunk.js","sourcesContent":["// used with `test` - can't use `g` flag or becomes stateful\nconst WORD_REGEX = /([\\p{Letter}\\p{Mark}]+)/u\n\nconst STRIP_REGEX = /%\\d\\$\\w|<[^>]+>/g\nconst EXCLUDE_REGEX = /[%${}[\\]#:<>]/\nconst MIN_LENGTH_ANY_CASE = 2\nconst MIN_LENGTH_LOWER_CASE = 3\n\nexport function check(src: string, trg: string, comment: string) {\n\tconst strippedSrc = src.replace(STRIP_REGEX, '\\x1e') // record separator\n\tconst strippedTrg = trg.replace(STRIP_REGEX, '\\x1f') // unit separator\n\t// record separator and unit separator are arbitrary, but must\n\t// a) never be present in translatable content,\n\t// b) not match WORD_REGEX,\n\t// c) be different from each other to avoid false matches\n\n\tconst srcSepsAndWords = strippedSrc.split(WORD_REGEX)\n\n\tconst iter = srcSepsAndWords.entries()[Symbol.iterator]()\n\n\tlet dupes: string[] = []\n\n\twhile (true) {\n\t\tlet n = iter.next()\n\n\t\tif (n.done) break\n\n\t\tconst [idx, seg] = n.value\n\n\t\tif (idx % 2 === 0) {\n\t\t\t// is separator\n\t\t\tcontinue\n\t\t}\n\n\t\tif (strippedTrg.toLowerCase().includes(seg.toLowerCase())) {\n\t\t\tlet strs = [seg]\n\n\t\t\twhile (true) {\n\t\t\t\tn = iter.next()\n\n\t\t\t\tif (n.done) break\n\n\t\t\t\t// prettier-ignore\n\t\t\t\tconst [/* idx */, nextSeg] = n.value;\n\n\t\t\t\tif (\n\t\t\t\t\tstrippedTrg\n\t\t\t\t\t\t.toLowerCase()\n\t\t\t\t\t\t.includes((strs.join('') + nextSeg).toLowerCase())\n\t\t\t\t) {\n\t\t\t\t\tstrs.push(nextSeg)\n\t\t\t\t} else {\n\t\t\t\t\tbreak\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tlet last = ''\n\n\t\t\twhile (last === '') {\n\t\t\t\tlast = strs.pop()\n\t\t\t}\n\n\t\t\tif (WORD_REGEX.test(last)) {\n\t\t\t\tstrs.push(last)\n\t\t\t}\n\n\t\t\tdupes.push(strs.join(''))\n\t\t}\n\t}\n\n\treturn [...new Set(dupes)].filter(dupe => {\n\t\tconst meetsMinLength =\n\t\t\tdupe.length >= MIN_LENGTH_LOWER_CASE ||\n\t\t\t(dupe !== dupe.toLowerCase() && dupe.length >= MIN_LENGTH_ANY_CASE)\n\n\t\treturn (\n\t\t\tmeetsMinLength &&\n\t\t\t!EXCLUDE_REGEX.test(dupe) &&\n\t\t\t!comment.includes(dupe)\n\t\t)\n\t})\n}\n","import { useEffect, useMemo } from 'react'\nimport { useForm } from 'react-hook-form'\nimport './App.css'\nimport { check } from './check'\nimport ExcelJS from 'exceljs'\n\nconst init = {\n\tcmtmp: 'Same as English: {{words}}',\n\tsuf: '_untranslated_{{date}}',\n}\n\nconst stored: typeof init ={\n\t...init,\n\t...JSON.parse(localStorage.getItem('form') ?? '{}')\n}\n\nenum Col {\n\tSrc = 7,\n\tTrg = 9,\n\tComments = 10,\n}\n\nconst suffixize = (filename: string, suffix: string) => {\n\tconst [, pre, ext] = filename.match(/^(.+)(\\.[^.]+)$/) ?? [\n\t\tnull,\n\t\tfilename,\n\t\t'',\n\t]\n\n\treturn (\n\t\tpre +\n\t\tsuffix.replace(\n\t\t\t'{{date}}',\n\t\t\tnew Date().toISOString().replace(/\\D/g, ''),\n\t\t) +\n\t\text\n\t)\n}\n\nconst parseExcelFile = async (\n\tfiles: FileList,\n\tcommentTemplate: string,\n\tsuffix: string,\n) => {\n\tif (!files.length) return\n\n\tfor (const file of files) {\n\t\tconst reader = new FileReader()\n\n\t\treader.onloadend = (_event) => {\n\t\t\tconst arrayBuffer = reader.result as ArrayBuffer\n\n\t\t\tconst workbook = new ExcelJS.Workbook()\n\n\t\t\tworkbook.xlsx.load(arrayBuffer).then(async (workbook) => {\n\t\t\t\tworkbook.worksheets.forEach((sheet) => {\n\t\t\t\t\tsheet.eachRow((row, _rowNumber) => {\n\t\t\t\t\t\tconst omitted = check(\n\t\t\t\t\t\t\trow.values[Col.Src] ?? '',\n\t\t\t\t\t\t\trow.values[Col.Trg] ?? '',\n\t\t\t\t\t\t\trow.values[Col.Comments] ?? '',\n\t\t\t\t\t\t)\n\n\t\t\t\t\t\tif (omitted.length) {\n\t\t\t\t\t\t\trow.getCell(Col.Comments).value = [\n\t\t\t\t\t\t\t\trow.values[Col.Comments],\n\t\t\t\t\t\t\t\tcommentTemplate.replace(\n\t\t\t\t\t\t\t\t\t'{{words}}',\n\t\t\t\t\t\t\t\t\tomitted.map((x) => `“${x}”`).join(', '),\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t.filter(Boolean)\n\t\t\t\t\t\t\t\t.join('\\n---\\n')\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\t\t\t\t})\n\n\t\t\t\tconst buf = await workbook.xlsx.writeBuffer({})\n\n\t\t\t\tconst a = document.createElement('a')\n\t\t\t\tconst outFile = new Blob([buf], {\n\t\t\t\t\ttype: 'image/jpeg',\n\t\t\t\t})\n\t\t\t\ta.href = URL.createObjectURL(outFile)\n\t\t\t\ta.download = suffixize(file.name, suffix)\n\t\t\t\ta.click()\n\t\t\t})\n\t\t}\n\n\t\treader.readAsArrayBuffer(file)\n\t}\n}\n\nexport const App = () => {\n\tconst { register, watch, handleSubmit } = useForm()\n\n\tconst changeHandler = (data: any) => {\n\t\tlocalStorage.setItem('form', JSON.stringify(data))\n\t}\n\n\tconst commentTemplate: string = watch('cmtmp') ?? stored.cmtmp\n\tconst filenameSuffix: string = watch('suf') ?? stored.suf\n\n\tconst files: FileList = useMemo(\n\t\t() => watch('file') ?? ([] as any as FileList),\n\t\t[watch],\n\t)\n\n\tuseEffect(() => {\n\t\tparseExcelFile(files, commentTemplate, filenameSuffix)\n\t\t// eslint-disable-next-line react-hooks/exhaustive-deps\n\t}, [files, /* commentTemplate, filenameSuffix */])\n\n\treturn (\n\t\t<form onChange={handleSubmit(changeHandler)}>\n\t\t\t<label>\n\t\t\t\tComments template\n\t\t\t\t<input\n\t\t\t\t\tname='cmtmp'\n\t\t\t\t\tdefaultValue={stored.cmtmp}\n\t\t\t\t\tref={register}\n\t\t\t\t/>\n\t\t\t</label>\n\t\t\t<br />\n\t\t\t<br />\n\t\t\t<label>\n\t\t\t\tOutput filename suffix\n\t\t\t\t<input name='suf' defaultValue={stored.suf} ref={register} />\n\t\t\t</label>\n\t\t\t<br />\n\t\t\t<br />\n\t\t\t<label>\n\t\t\t\tUpload file (XLSX)\n\t\t\t\t<input type='file' name='file' multiple ref={register} />\n\t\t\t</label>\n\t\t</form>\n\t)\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport { App } from './App'\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById('root'),\n)\n"],"sourceRoot":""}