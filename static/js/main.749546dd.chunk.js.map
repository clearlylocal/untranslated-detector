{"version":3,"sources":["check.tsx","App.tsx","serializeCol.tsx","reportWebVitals.ts","index.tsx"],"names":["WORD_REGEX","EXCLUDE_REGEX","stored","JSON","parse","localStorage","getItem","sn","src","trg","cm","cmtmp","App","useForm","register","watch","handleSubmit","sheetName","srcColHeading","trgColHeading","commentsColHeading","commentTemplate","files","useState","workbook","setWorkbook","useEffect","length","file","reader","FileReader","onload","e","data","Uint8Array","target","result","xlsx","read","type","readAsArrayBuffer","col","rows","useMemo","Sheets","utils","sheet_to_json","parsed","Error","cloned","stringify","headers","header","some","name","includes","map","row","omitted","comment","iter","split","entries","Symbol","iterator","dupes","n","next","done","value","idx","seg","strs","nextSeg","join","push","last","pop","test","filter","dupe","toLowerCase","check","replace","Boolean","console","error","onChange","setItem","defaultValue","ref","message","readOnly","p","cell","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.749546dd.chunk.js","sourcesContent":["const WORD_REGEX = /([\\p{Letter}\\p{Mark}]+)/gu\nconst EXCLUDE_REGEX = /[%${}[\\]#:<>]/\nconst MIN_LENGTH_ANYCASE = 2\nconst MIN_LENGTH_LOWERCASE = 3\n\nexport function check(src: string, trg: string, comment: string) {\n\tconst srcSepsAndWords = src.split(WORD_REGEX)\n\n\tconst iter = srcSepsAndWords.entries()[Symbol.iterator]()\n\n\tconst dupes: string[] = []\n\n\twhile (true) {\n\t\tlet n = iter.next()\n\n\t\tif (n.done) break\n\n\t\tconst [idx, seg] = n.value\n\n\t\tif (idx % 2 === 0) {\n\t\t\t// is separator\n\t\t\tcontinue\n\t\t}\n\n\t\tif (trg.includes(seg)) {\n\t\t\tlet strs = [seg]\n\n\t\t\twhile (true) {\n\t\t\t\tn = iter.next()\n\n\t\t\t\tif (n.done) break\n\n\t\t\t\t// prettier-ignore\n\t\t\t\tconst [/* idx */, nextSeg] = n.value;\n\n\t\t\t\tif (trg.includes(strs.join('') + nextSeg)) {\n\t\t\t\t\tstrs.push(nextSeg)\n\t\t\t\t} else {\n\t\t\t\t\tbreak\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tlet last = ''\n\n\t\t\twhile (last === '') {\n\t\t\t\tlast = strs.pop()\n\t\t\t}\n\n\t\t\tif (WORD_REGEX.test(last)) {\n\t\t\t\tstrs.push(last)\n\t\t\t}\n\n\t\t\tdupes.push(strs.join(''))\n\t\t}\n\t}\n\n\treturn dupes.filter(dupe => {\n\t\tconst meetsMinLength =\n\t\t\tdupe.length >= MIN_LENGTH_LOWERCASE ||\n\t\t\t(dupe !== dupe.toLowerCase() && dupe.length >= MIN_LENGTH_ANYCASE)\n\n\t\treturn (\n\t\t\tmeetsMinLength &&\n\t\t\t!EXCLUDE_REGEX.test(dupe) &&\n\t\t\t!comment.includes(dupe)\n\t\t)\n\t})\n}\n","import { useEffect, useMemo, useState } from 'react'\nimport { useForm } from 'react-hook-form'\nimport './App.css'\nimport xlsx from 'xlsx'\nimport { check } from './check'\nimport { serializeCol } from './serializeCol'\n\nconst init = {\n\tsn: 'Sheet1',\n\tsrc: 'eng',\n\ttrg: 'bn-rBD',\n\tcm: 'Note',\n\tcmtmp: 'Same as English: {{words}}',\n}\n\nconst stored: typeof init =\n\tJSON.parse(localStorage.getItem('form') ?? 'null') ?? init\n\nexport const App = () => {\n\tconst { register, watch,  handleSubmit } = useForm()\n\n\tconst changeHandler = data => {\n\t\tlocalStorage.setItem('form', JSON.stringify(data))\n\t}\n\n\tconst sheetName: string = watch('sn') ?? stored.sn\n\n\tconst srcColHeading: string = watch('src') ?? stored.src\n\tconst trgColHeading: string = watch('trg') ?? stored.trg\n\tconst commentsColHeading: string = watch('cm') ?? stored.cm\n\n\tconst commentTemplate: string = watch('cmtmp') ?? stored.cmtmp\n\n\tconst files: FileList = watch('file') ?? (([] as any) as FileList)\n\n\tconst [workbook, setWorkbook] = useState<xlsx.WorkBook | null>(null)\n\n\tuseEffect(() => {\n\t\tif (!files.length) return\n\n\t\tconst file = files[0]\n\t\tconst reader = new FileReader()\n\t\treader.onload = e => {\n\t\t\tconst data = new Uint8Array(e.target.result as ArrayBuffer)\n\t\t\tconst workbook = xlsx.read(data, { type: 'array' })\n\n\t\t\tsetWorkbook(workbook)\n\t\t}\n\n\t\treader.readAsArrayBuffer(file)\n\t}, [files])\n\n\tconst rows = useMemo(() => {\n\t\tif (!workbook?.Sheets?.[sheetName]) {\n\t\t\treturn []\n\t\t}\n\n\t\tconst rows = xlsx.utils.sheet_to_json(workbook.Sheets[sheetName], {})\n\n\t\treturn rows\n\t}, [workbook, sheetName]) as Record<string, string>[]\n\n\tconst parsed = useMemo(() => {\n\t\tif (!workbook) {\n\t\t\treturn new Error('Upload a file')\n\t\t}\n\n\t\tconst cloned = JSON.parse(JSON.stringify(rows)) as typeof rows\n\n\t\ttry {\n\t\t\tconst headers = xlsx.utils.sheet_to_json(\n\t\t\t\tworkbook.Sheets[sheetName],\n\t\t\t\t{ header: 1 },\n\t\t\t)[0] as string[]\n\n\t\t\tif (!headers?.length) {\n\t\t\t\treturn new Error('Sheet not found or has no headers')\n\t\t\t}\n\n\t\t\tif (\n\t\t\t\t[srcColHeading, trgColHeading, commentsColHeading].some(\n\t\t\t\t\tname => !headers.includes(name),\n\t\t\t\t)\n\t\t\t) {\n\t\t\t\treturn new Error('Not all headers found')\n\t\t\t}\n\n\t\t\treturn cloned.map(row => {\n\t\t\t\tconst omitted = check(\n\t\t\t\t\trow[srcColHeading] ?? '',\n\t\t\t\t\trow[trgColHeading] ?? '',\n\t\t\t\t\trow[commentsColHeading] ?? '',\n\t\t\t\t)\n\n\t\t\t\tif (omitted.length) {\n\t\t\t\t\trow[commentsColHeading] = [\n\t\t\t\t\t\trow[commentsColHeading],\n\t\t\t\t\t\tcommentTemplate.replace(\n\t\t\t\t\t\t\t'{{words}}',\n\t\t\t\t\t\t\tomitted.join(', '),\n\t\t\t\t\t\t),\n\t\t\t\t\t]\n\t\t\t\t\t\t.filter(Boolean)\n\t\t\t\t\t\t.join('\\n---\\n')\n\t\t\t\t}\n\n\t\t\t\treturn row\n\t\t\t})\n\t\t} catch (e) {\n\t\t\tconsole.error(e)\n\n\t\t\treturn e as Error\n\t\t}\n\t}, [\n\t\tworkbook,\n\t\trows,\n\t\tsrcColHeading,\n\t\ttrgColHeading,\n\t\tcommentsColHeading,\n\t\tcommentTemplate,\n\t\tsheetName,\n\t])\n\n\treturn (\n\t\t<form onChange={handleSubmit(changeHandler)}>\n\t\t\t<label>\n\t\t\t\tSheet name\n\t\t\t\t<input\n\t\t\t\t\tname='sn'\n\t\t\t\t\tdefaultValue={stored.sn}\n\t\t\t\t\tref={register}\n\t\t\t\t></input>\n\t\t\t</label>\n\t\t\t<br />\n\t\t\t<br />\n\t\t\t<label>\n\t\t\t\tSource col heading\n\t\t\t\t<input\n\t\t\t\t\tname='src'\n\t\t\t\t\tdefaultValue={stored.src}\n\t\t\t\t\tref={register}\n\t\t\t\t></input>\n\t\t\t</label>\n\t\t\t<br />\n\t\t\t<br />\n\t\t\t<label>\n\t\t\t\tTarget col heading\n\t\t\t\t<input\n\t\t\t\t\tname='trg'\n\t\t\t\t\tdefaultValue={stored.trg}\n\t\t\t\t\tref={register}\n\t\t\t\t></input>\n\t\t\t</label>\n\t\t\t<br />\n\t\t\t<br />\n\t\t\t<label>\n\t\t\t\tComments col heading\n\t\t\t\t<input\n\t\t\t\t\tname='cm'\n\t\t\t\t\tdefaultValue={stored.cm}\n\t\t\t\t\tref={register}\n\t\t\t\t></input>\n\t\t\t</label>\n\t\t\t<br />\n\t\t\t<br />\n\t\t\t<label>\n\t\t\t\tComments template\n\t\t\t\t<input\n\t\t\t\t\tname='cmtmp'\n\t\t\t\t\tdefaultValue={stored.cmtmp}\n\t\t\t\t\tref={register}\n\t\t\t\t/>\n\t\t\t</label>\n\t\t\t<br />\n\t\t\t<br />\n\t\t\t<label>\n\t\t\t\tUpload file (XLSX)\n\t\t\t\t<input type='file' name='file' ref={register} />\n\t\t\t</label>\n\t\t\t<br />\n\t\t\t<br />\n\t\t\t<hr />\n\t\t\t<br />\n\t\t\t<br />\n\t\t\t{parsed instanceof Error ? (\n\t\t\t\t<strong>{parsed.message}</strong>\n\t\t\t) : (\n\t\t\t\t<textarea\n\t\t\t\t\treadOnly\n\t\t\t\t\tvalue={serializeCol([\n\t\t\t\t\t\tcommentsColHeading,\n\t\t\t\t\t\t...parsed.map(p => p[commentsColHeading] ?? ''),\n\t\t\t\t\t])}\n\t\t\t\t/>\n\t\t\t)}\n\t\t</form>\n\t)\n}\n","export function serializeCol(col: string[]) {\n\treturn col\n\t\t.map(cell =>\n\t\t\t/[\\t\\n\"]/.test(cell) ? `\"${cell.split('\"').join('\"\"')}\"` : cell,\n\t\t)\n\t\t.join('\\n')\n}\n","import { ReportHandler } from 'web-vitals'\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n\tif (onPerfEntry && onPerfEntry instanceof Function) {\n\t\timport('web-vitals').then(\n\t\t\t({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n\t\t\t\tgetCLS(onPerfEntry)\n\t\t\t\tgetFID(onPerfEntry)\n\t\t\t\tgetFCP(onPerfEntry)\n\t\t\t\tgetLCP(onPerfEntry)\n\t\t\t\tgetTTFB(onPerfEntry)\n\t\t\t},\n\t\t)\n\t}\n}\n\nexport default reportWebVitals\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport { App } from './App'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById('root'),\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}